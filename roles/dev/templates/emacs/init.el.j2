; Generated by Ansible for {{ ansible_nodename  }}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; パッケージ
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/"))

(package-initialize)
(unless package-archive-contents (package-refresh-contents))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 基本設定
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 言語
(set-language-environment 'Japanese);           ; 日本語
(prefer-coding-system 'utf-8-unix)              ; 文字コードは基本 UTF-8
(set-default 'buffer-file-coding-system 'utf-8-unix)

; タブ
(setq-default c-basic-offset 4)                 ; インデント
(setq-default tab-width 4)                      ; タブ幅は 4
(setq-default indent-tabs-mode nil)             ; タブはスペースに変換
(setq-default indent-level 4)                   ; インデント幅は 4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 色
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(package-install 'moe-theme)
(require 'moe-theme)
(moe-dark)

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 表示
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 行
(setq line-number-display-limit-width 10000)
(line-number-mode t)
(column-number-mode t)

; 括弧
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'parenthesis)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 便利機能
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 自動保存
(package-install 'auto-save-buffers-enhanced)
(setq auto-save-buffers-enhanced-interval 10)
(auto-save-buffers-enhanced t)

; 日本語検索
(package-install 'migemo)
(require 'migemo)
(setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")

; カーソル位置を保存
(package-install 'session)
(setq session-save-file "~/.emacs-session")
(add-hook 'after-init-hook 'session-initialize)

; 最近使ったファイル
(package-install 'recentf-ext)
(setq recentf-max-saved-items 1000)
(setq recentf-auto-cleanup 50)
(setq recentf-auto-save-timer (run-with-idle-timer 30 t 'recentf-save-list))
(recentf-mode 1)

; 履歴を永続化
(savehist-mode 1)

; スペースの自動挿入
(package-install 'electric-spacing)

; helm
(package-install 'helm)

(require 'helm-config)
(helm-mode 1)

(define-key global-map          (kbd "M-x"      ) 'helm-M-x)
(define-key global-map          (kbd "C-x C-f"  ) 'helm-find-files)
(define-key global-map          (kbd "C-x C-r"  ) 'helm-recentf)
(define-key global-map          (kbd "M-y"      ) 'helm-show-kill-ring)
(define-key helm-map            (kbd "C-h"      ) 'delete-backward-char)
(define-key helm-find-files-map (kbd "C-h"      ) 'delete-backward-char)
(define-key helm-find-files-map (kbd "TAB"      ) 'helm-execute-persistent-action)
(define-key helm-map            (kbd "C-z"      ) 'helm-select-action)
; NOTE: helm-find-files では C-j でディレクトリオープン．C-l で上のディレクトリ移動．

; ファイルが更新されたら読み込み直す
(global-auto-revert-mode 1)

; バッファ切り替え
(require 'ibuffer)
(setq ibuffer-default-sorting-mode 'alphabetic)

(define-ibuffer-column row
  (:name "Rows" :inline t)
  (format "%5d" (count-lines (point-min) (point-max))))

(define-ibuffer-column coding
  (:name " coding ")
  (if (coding-system-get buffer-file-coding-system 'mime-charset)
      (format " %s" (coding-system-get buffer-file-coding-system 'mime-charset))
    " undefined"))

(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

(setq ibuffer-formats '((mark modified read-only
                              " " (name 25 40 :left :elide)
                              " " (size-h 9 -1 :right)
                              " " (row 5 -1 :right)
                              " " (mode 16 16 :left :elide)
                              " " (coding 12 12 :right)
                              " " filename-and-process)
                        (mark " " (name 16 -1)
                              " " filename)))

(define-key global-map (kbd "C-x b") 'helm-buffers-list)
(define-key global-map (kbd "C-x C-b") 'ibuffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 永続化
(package-install 'stash)
(defstash kill-ring "kill-ring.el" nil (or stashed 'nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Git
(package-install 'magit)
(package-install 'magit-delta)
(global-set-key (kbd "C-x g") 'magit-status)
(add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; バックアップ
(setq make-backup-files t)                      ; バックアップを作成
(setq vc-make-backup-files t)                   ; VC の管理下にあっても作成
(setq backup-directory-alist
      (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/backup"))
                        backup-directory-alist))
(setq version-control t)                        ; バージョン管理する
(setq kept-new-versions 20)                     ; 新しいものは 10 世代
(setq delete-old-versions t)                    ; 確認せずに古いものを削除

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ファイルタイプ別のメジャーモード
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(package-install 'ruby-mode)
(package-install 'perl-mode)
(package-install 'yaml-mode)
(package-install 'json-mode)
(package-install 'vue-mode)
(package-install 'markdown-mode)

(package-install 'python-black)
(add-hook 'python-mode-hook
          #'(lambda ()
              (add-hook 'before-save-hook
                        'python-black-buffer nil t)))

(package-install 'typescript-mode)
(package-install 'tide)
(add-hook 'typescript-mode-hook
		  (lambda ()
			(interactive)
			(tide-setup)
			(flycheck-mode +1)
			(setq flycheck-check-syntax-automatically '(save mode-enabled))
			(eldoc-mode +1)
			(tide-hl-identifier-mode +1)
			(company-mode +1)
			(global-set-key (kbd "M-*") 'tide-jump-back)))

(package-install 'rustic)
(setq rustic-lsp-client 'eglot)
(add-hook 'rustic-mode-hook
          (lambda ()
            (flycheck-mode +1)
            (setq rustic-format-trigger 'on-save)
            (when (executable-find "rust-analyzer")
              (setq rustic-lsp-server 'rust-analyzer))))

(package-install 'dockerfile-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 補完
(global-set-key (kbd "C-M-_") 'dabbrev-completion)

(package-install 'company)
(global-company-mode)
(setq company-require-match 'never)

(package-install 'eglot)
(require 'eglot)
(add-to-list 'eglot-server-programs '(python-mode . ("pyls")))
(add-hook 'python-mode-hook 'eglot-ensure)

(define-key eglot-mode-map (kbd "M-e") #'flymake-goto-next-error)
(define-key eglot-mode-map (kbd "M-E") #'flymake-goto-prev-error)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; エラーチェック
(require 'flymake)
(set-face-background 'flymake-errline "orange red")
(set-face-foreground 'flymake-errline "black")

(package-install 'flymake-diagnostic-at-point)
(require 'flymake-diagnostic-at-point)
(add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; その他
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; #! で始まっていればファイル保存時に実行権限を与える
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
