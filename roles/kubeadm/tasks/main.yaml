-   name: Install Packages
    package:
        name:
        -   apt-transport-https
        -   ca-certificates
        -   curl
        -   gpg

-   name: Uninstall Packages
    package:
        name:
        -   prometheus-node-exporter # NOTE: DaemonSet で配置するので削除しておく
        state: absent

-   name: Install Docker public signing key
    shell: curl -sSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor  --batch --yes --output /usr/share/keyrings/docker-archive-keyring.gpg

# -   name: Add the Docker apt repository
#     lineinfile:
#         path: /etc/apt/sources.list.d/docker.list
#         line: deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu noblem stable
#         create: yes
#     when: (ansible_distribution == 'Ubuntu') and (ansible_distribution_version == '24.04')

-   name: Add the Docker apt repository
    lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable
        create: yes

-   name: Install Docker public signing key
    shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor --batch --yes --output /etc/apt/keyrings/kubernetes-apt-keyring.gpg

-   name: Add the Kubernetes apt repository
    lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /
        create: yes


-   name: Install containerd Kubernetes Packages
    apt:
        pkg:
        -   docker-ce
        -   kubelet
        -   kubeadm
        -   kubectl
        update_cache: yes
    notify: reboot

-   name: Hold Kubernetes Packages
    dpkg_selections:
        name: '{{item}}'
        selection: hold
    with_items:
    -   kubelet
    -   kubeadm
    -   kubectl

-   name: Setting kernel module
    lineinfile:
        path: /etc/modules-load.d/kubernetes.conf
        line: "{{item}}"
        create: yes
    with_items:
    -   overlay
    -   br_netfilter

-   name: Load kernel module
    modprobe:
        name: br_netfilter
        state: present

-   name: Setting Sysctl
    lineinfile:
        path: /etc/sysctl.conf
        regexp: '^{{item.name}}.*'
        line: '{{item.name}}={{item.value}}'
    with_items:
    -   name: net.ipv4.ip_forward
        value: 1
    -   name: net.bridge.bridge-nf-call-ip6table
        value: 1
    -   name: net.bridge.bridge-nf-call-iptables
        value: 1
    -   name: fs.inotify.max_user_instances
        value: 100000
    -   name: fs.inotify.max_user_watches
        value: 100000
    notify: reload sysctl

-   name: Create containerd config directory
    file:
        path: /etc/containerd
        state: directory
        mode: '0755'

-   name: Create containerd config file
    shell: containerd config default > /etc/containerd/config.toml

-   name: Setting crictl endpoint
    shell: crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock

-   name: Enable systemd cgroup
    lineinfile:
        path: /etc/containerd/config.toml
        regexp: '{{item.regexp}}'
        line: '{{item.line}}'
        insertafter: '{{item.insertafter}}'
    with_items:
    -   regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        insertafter: 'plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options'

    # -   regexp: 'endpoint = \["http://registry.green-rabbit.net"\]'
    #     line: '          endpoint = ["http://registry.green-rabbit.net"]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'

    # -   regexp: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.green-rabbit.net"\]'
    #     line: '        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.green-rabbit.net"]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'

    # -   regexp: 'endpoint = \["http://registry.green-rabbit.net:5000"\]'
    #     line: '          endpoint = ["http://registry.green-rabbit.net:5000"]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'

    # -   regexp: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.green-rabbit.net:5000"\]'
    #     line: '        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.green-rabbit.net:5000"]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'

    # -   regexp: 'insecure_skip_verify = true'
    #     line: '          insecure_skip_verify = true'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'

    # -   regexp: '\[plugins."io.containerd.grpc.v1.cri".registry.configs."registry.green-rabbit.net".tls\]'
    #     line: '        [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.green-rabbit.net".tls]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'

    # -   regexp: 'insecure_skip_verify = true'
    #     line: '          insecure_skip_verify = true'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'

    # -   regexp: '\[plugins."io.containerd.grpc.v1.cri".registry.configs."registry.green-rabbit.net:5000".tls\]'
    #     line: '        [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.green-rabbit.net:5000".tls]'
    #     insertafter: '\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'

    -   regexp: 'discard_unpacked_layers'
        line: '      discard_unpacked_layers = true'
        insertafter: '\[plugins."io.containerd.grpc.v1.cri".containerd\]'


-   name: Join docker group
    user:
        name: '{{ ansible_env.SUDO_USER }}'
        groups: docker
        append: yes

# -   name: Load /etc/docker/daemon.json
#     shell:
#         cmd: cat /etc/docker/daemon.json || echo '{}'
#     register: daemon_json_txt

# -   name: Parse daemon.json
#     set_fact:
#         daemon_json: '{{ daemon_json_txt.stdout | from_json }}'

# -   name: Setting docker
#     copy:
#         dest: /etc/docker/daemon.json
#         content: '{{ daemon_json | combine( { "insecure-registries": ["registry.green-rabbit.net", "registry.green-rabbit.net:5000"] } ) | to_json }}'

-   name: Edit eviction threshold
    blockinfile:
        path: /var/lib/kubelet/config.yaml
        block: |
            evictionHard:
              imagefs.available: "2%"
              nodefs.available: "1%"
    # NOTE: このファイルが存在しない場合，まだ kubeadm init や join 前のはずで，
    # それらを実行すると上書きされてしまうものの，ここでコケると不便なので
    # とりあえず作成する．
        create: yes
    notify: restart kubelet
    when: "'raspi' in ansible_kernel"

-   name: Remove Apt cache
    apt:
        autoclean: yes
    when: "'raspi' in ansible_kernel"

-   name: List old log files (1)
    find:
        paths: /var/log
        patterns: "*.gz"
    register: old_log_1
    when: "'raspi' in ansible_kernel"

-   name: List old log files (2)
    find:
        paths: /var/log
        patterns: "*.0"
    register: old_log_2
    when: "'raspi' in ansible_kernel"

-   name: Remove old log files
    file:
        path: "{{ item['path'] }}"
        state: absent
    with_items:
    -   "{{ old_log_1['files'] }}"
    -   "{{ old_log_2['files'] }}"
    when: "'raspi' in ansible_kernel"

-   name: Remove systemd log
    shell:
        cmd: journalctl --vacuum-size=0
    when: "'raspi' in ansible_kernel"

-   name: Protect NAND devices
    lineinfile:
        path: /etc/fstab
        regexp: '{{item.regexp}}'
        line: '{{item.line}}'
    with_items:
    -   regexp: 'LABEL=writable'
        line: 'LABEL=writable  /   ext4    discard,errors=remount-ro,noatime,commit=3600   0 1'
    -   regexp: '/tmp'
        line: 'tmpfs        /tmp            tmpfs   nosuid,nodev         0       0'
    -   regexp: '/var/log'
        line: 'tmpfs        /var/log        tmpfs   nosuid,nodev         0       0'
    when: "'raspi' in ansible_kernel"

-   name: Disable swap
    lineinfile:
        path: /etc/fstab
        regexp: '\sswap\s'
        state: absent

# Local Variables:
# mode: yaml
# tab-width: 4
# End:
